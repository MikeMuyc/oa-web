{"version":3,"sources":["webpack:///./src/axios/index.ts","webpack:///./src/api/app.ts"],"names":["timeout","pending","restUrl","cancelToken","a","CancelToken","removePending","ever","p","u","url","method","f","splice","interceptors","request","use","config","indexOf","c","push","error","Promise","reject","response","status","pUrl","baseURL","proUrl","this","data","auth","defaults","withCredentials","headers","params","uploadFile","catalog","post"],"mappings":"yPAMMA,EAAU,IAIZC,EAAsB,GACtBC,EAAO,GACPC,EAAc,EAAAC,EAAMC,YACpBC,EAAgB,SAACC,GACjB,IAAI,IAAIC,KAAKP,EACNA,EAAQO,GAAGC,IAAMF,EAAKG,IAAM,IAAMH,EAAKI,SACtCV,EAAQO,GAAGI,IAEXX,EAAQY,OAAOL,EAAG,KAO9B,EAAAJ,EAAMU,aAAaC,QAAQC,KAAI,SAAAC,GAU3B,OARGf,EAAQgB,QAAQD,EAAOP,MAAQ,IAC9BJ,EAAcW,GACdA,EAAOd,YAAc,IAAIA,GAAY,SAACgB,GAElClB,EAAQmB,KAAK,CAAEX,EAAGQ,EAAOP,IAAM,IAAMO,EAAON,OAAQC,EAAGO,QAIxDF,KACT,SAAAI,GACE,OAAOC,QAAQC,OAAOF,MAI1B,EAAAjB,EAAMU,aAAaU,SAASR,KAAI,SAAAQ,GAE5B,OADAlB,EAAckB,EAASP,QAChBO,KACR,SAAAH,GAaC,OAZIA,EAAMG,UACHH,EAAMG,SAASC,OAWfH,QAAQC,OAAOF,EAAMG,a,IAKX,E,WAGjB,WAAYd,EAAagB,GAAa,uBAFtC,KAAAC,QAAA,QACA,KAAAC,OAAA,GAEQlB,IACAmB,KAAKF,QAAUjB,GAEfgB,IACAG,KAAKD,OAASF,G,oDAGjBhB,EAAYoB,EAAWC,GAOxB,OAFI,EAAA3B,EAAM4B,SAASL,QAAUE,KAAKD,OAE3B,IAAM,CACTjB,OAAQ,OACRD,IAAKA,EACLoB,KAAMA,EACN9B,QAASA,EACTiC,iBAAiB,EACjBF,KAAKA,EACLG,QAAS,O,0BAMbxB,EAAYyB,GAOZ,OAFI,EAAA/B,EAAM4B,SAASL,QAAUE,KAAKD,OAE3B,IAAM,CACTjB,OAAQ,MACRD,IAAKA,EACLyB,OAAQA,EACRnC,QAASA,EACTiC,iBAAiB,EACjBC,QAAS,O,6BAKVxB,EAAYoB,GAOf,OAFI,EAAA1B,EAAM4B,SAASL,QAAUE,KAAKD,OAE3B,IAAM,CACTjB,OAAQ,SACRD,IAAKA,EACLoB,KAAMA,EACN9B,QAASA,EACTiC,iBAAiB,EACjBC,QAAS,O,0BAKbxB,EAAYoB,GAOZ,OAFI,EAAA1B,EAAM4B,SAASL,QAAUE,KAAKD,OAE3B,IAAM,CACTjB,OAAQ,MACRD,IAAKA,EACLoB,KAAMA,EACN9B,QAASA,EACTiC,iBAAiB,EACjBC,QAAS,S,KC3IR,EAAQ,IAAI,EAAQ,SAQ3B,SAAUE,EAAWC,EAAeP,GACtC,OAAO,EAAMQ,KAAN,qCAAyCD,GAAUP","file":"js/chunk-2d21043b.25b12c77.js","sourcesContent":["import axios, {AxiosRequestConfig, AxiosBasicCredentials} from 'axios'\r\n\r\nimport { Message } from 'element-ui';\r\nimport qs from 'qs'\r\n\r\n\r\nconst timeout = 10000;\r\n//const baseURL = `./api`;\r\n\r\n\r\nlet pending:Array<any>  = [];   //声明一个数组用于存储每个ajax请求的取消函数和ajax标识\r\nlet restUrl:string = ``;               //存放需要做重复请求拦截的接口\r\nlet cancelToken = axios.CancelToken;\r\nlet removePending = (ever:any) => {\r\n    for(let p in pending){\r\n        if(pending[p].u === ever.url + '&' + ever.method) { //当当前请求在数组中存在时执行函数体\r\n            pending[p].f(); //执行取消操作\r\n            // @ts-ignore\r\n            pending.splice(p, 1); //把这条记录从数组中移除\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//添加请求拦截器\r\naxios.interceptors.request.use(config=>{\r\n    // @ts-ignore\r\n    if(restUrl.indexOf(config.url) > -1){\r\n        removePending(config); //在一个ajax发送前执行一下取消操作\r\n        config.cancelToken = new cancelToken((c)=>{\r\n            // 这里的ajax标识，是用请求地址&请求方式拼接的字符串，当然你可以选择其他的一些方式\r\n            pending.push({ u: config.url + '&' + config.method, f: c });\r\n        });\r\n    }\r\n\r\n    return config;\r\n},error => {\r\n    return Promise.reject(error);\r\n});\r\n\r\n//添加响应拦截器\r\naxios.interceptors.response.use(response => {\r\n    removePending(response.config)\r\n    return response;\r\n}, error => {\r\n    if (error.response) {\r\n        if(error.response.status === 401){\r\n           /* Message({\r\n                showClose: true,\r\n                message: `无访问权限！`,\r\n                type: 'error'\r\n            })*/\r\n           /* router.push({\r\n                path: '/main',\r\n            });*/\r\n        }\r\n    }\r\n    return Promise.reject(error.response)\r\n});\r\n\r\n\r\n\r\nexport default class myaxios{\r\n    baseURL:string = `./api`;\r\n    proUrl:string = ``;\r\n    constructor(url?: string,pUrl?: string) { //constructor是一个构造方法，用来接收参数\r\n        if (url) {\r\n            this.baseURL = url;\r\n        }\r\n        if (pUrl) {\r\n            this.proUrl = pUrl;\r\n        }\r\n    }\r\n    post(url:string, data?:any, auth?:AxiosBasicCredentials) {\r\n        if (process.env.NODE_ENV === 'development') {\r\n            //开发环境 do something\r\n            axios.defaults.baseURL = this.baseURL;\r\n        }else{\r\n            axios.defaults.baseURL = this.proUrl;\r\n        }\r\n        return axios({\r\n            method: 'post',\r\n            url: url,\r\n            data: data,\r\n            timeout: timeout,\r\n            withCredentials: true,\r\n            auth:auth,\r\n            headers: {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    get(url:string, params?:any) {\r\n        if (process.env.NODE_ENV === 'development') {\r\n            //开发环境 do something\r\n            axios.defaults.baseURL = this.baseURL;\r\n        }else{\r\n            axios.defaults.baseURL = this.proUrl;\r\n        }\r\n        return axios({\r\n            method: 'get',\r\n            url: url,\r\n            params: params,\r\n            timeout: timeout,\r\n            withCredentials: true,\r\n            headers: {\r\n\r\n            }\r\n        })\r\n    }\r\n    delete(url:string, data?:any) {\r\n        if (process.env.NODE_ENV === 'development') {\r\n            //开发环境 do something\r\n            axios.defaults.baseURL = this.baseURL;\r\n        }else{\r\n            axios.defaults.baseURL = this.proUrl;\r\n        }\r\n        return axios({\r\n            method: 'delete',\r\n            url: url,\r\n            data: data,\r\n            timeout: timeout,\r\n            withCredentials: true,\r\n            headers: {\r\n\r\n            }\r\n        })\r\n    }\r\n    put(url:string, data?:any){\r\n        if (process.env.NODE_ENV === 'development') {\r\n            //开发环境 do something\r\n            axios.defaults.baseURL = this.baseURL;\r\n        }else{\r\n            axios.defaults.baseURL = this.proUrl;\r\n        }\r\n        return axios({\r\n            method: 'put',\r\n            url: url,\r\n            data: data,\r\n            timeout: timeout,\r\n            withCredentials: true,\r\n            headers: {\r\n\r\n            }\r\n        })\r\n    }\r\n}\r\n","import myaxios from \"@oa/axios\";\r\n\r\nimport {AxiosBasicCredentials} from \"axios\";\r\nexport const axios = new myaxios('./apw');\r\n\r\n//登录\r\n/*export function login(data:AxiosBasicCredentials) {\r\n    return axios.post('/api/waterloo/login',{withToken: false},data);\r\n}*/\r\n\r\n/**上传文件**/\r\nexport function uploadFile(catalog:string,data:any) {\r\n    return axios.post(`/api/oa/file/batch?catalog=${catalog}`,data);\r\n}\r\n\r\n"],"sourceRoot":""}