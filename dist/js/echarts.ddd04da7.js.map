{"version":3,"sources":["webpack:///./node_modules/echarts-liquidfill/src/liquidFillSeries.js","webpack:///./node_modules/echarts-liquidfill/src/liquidFill.js","webpack:///./node_modules/echarts-liquidfill/src/liquidFillView.js","webpack:///./node_modules/echarts-liquidfill/src/liquidFillLayout.js","webpack:///./node_modules/echarts-liquidfill/index.js"],"names":["completeDimensions","echarts","extendSeriesModel","type","visualColorAccessPath","optionUpdated","option","this","gridSize","Math","max","floor","getInitialData","ecModel","dimensions","data","list","List","initData","defaultOption","color","center","radius","amplitude","waveLength","phase","period","direction","shape","waveAnimation","animationEasing","animationEasingUpdate","animationDuration","animationDurationUpdate","outline","show","borderDistance","itemStyle","borderColor","borderWidth","shadowBlur","shadowColor","backgroundStyle","opacity","label","insideColor","fontSize","fontWeight","align","baseline","position","emphasis","registerVisual","util","curry","numberUtil","number","symbolUtil","parsePercent","LiquidLayout","extendChartView","render","seriesModel","api","group","removeAll","getData","itemModel","getItemModel","get","width","getWidth","height","getHeight","size","min","outlineDistance","outlineBorderWidth","showOutline","outterRadius","innerRadius","paddingRadius","cx","cy","isFillContainer","symbol","getOutline","style","lineWidth","add","left","top","wavePath","getBackground","oldData","_data","waves","getPath","r","isForClipping","indexOf","path","graphic","makePath","slice","bouding","getBoundingRect","w","h","BoundingRect","x","y","createSymbol","Circle","outlinePath","fill","setStyle","getModel","getItemStyle","strokePath","z2","fillPath","stroke","Group","getWave","idx","isInverse","oldWave","radiusX","radiusY","itemStyleModel","value","waterLevel","PI","normalStyle","seriesColor","id","length","wave","inverse","_waterLevel","hoverStyle","setHoverStyle","clip","setClipPath","setWaveAnimation","maxSpeed","defaultSpeed","cnt","count","speed","phaseOffset","console","error","animate","when","during","dirty","start","getText","labelModel","formatLabel","formatted","getFormattedLabel","defaultVal","defaultLabel","getName","name","isNaN","toFixed","textOption","text","textAlign","textVerticalAlign","silent","outsideTextRect","Rect","setText","insideTextRect","insColor","textFill","boundingCircle","CompoundPath","paths","diff","initProps","setItemGraphicEl","push","update","newIdx","oldIdx","waveElement","getItemGraphicEl","newWave","shapeAttrs","i","attr","hasOwnProperty","styleAttrs","updateProps","useStyle","clipPath","remove","execute","dispose","getWaterPositions","stage","module","exports","extendShape","buildPath","ctx","curves","ceil","moveTo","waveRight","c","pos","bezierCurveTo","lineTo","closePath"],"mappings":"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","file":"js/echarts.ddd04da7.js","sourcesContent":["var completeDimensions = require('echarts/lib/data/helper/completeDimensions');\nvar echarts = require('echarts/lib/echarts');\n\necharts.extendSeriesModel({\n\n    type: 'series.liquidFill',\n\n    visualColorAccessPath: 'textStyle.normal.color',\n\n    optionUpdated: function () {\n        var option = this.option;\n        option.gridSize = Math.max(Math.floor(option.gridSize), 4);\n    },\n\n    getInitialData: function (option, ecModel) {\n        var dimensions = completeDimensions(['value'], option.data);\n        var list = new echarts.List(dimensions, this);\n        list.initData(option.data);\n        return list;\n    },\n\n    defaultOption: {\n        color: ['#294D99', '#156ACF', '#1598ED', '#45BDFF'],\n        center: ['50%', '50%'],\n        radius: '50%',\n        amplitude: '8%',\n        waveLength: '80%',\n        phase: 'auto',\n        period: 'auto',\n        direction: 'right',\n        shape: 'circle',\n\n        waveAnimation: true,\n        animationEasing: 'linear',\n        animationEasingUpdate: 'linear',\n        animationDuration: 2000,\n        animationDurationUpdate: 1000,\n\n        outline: {\n            show: true,\n            borderDistance: 8,\n            itemStyle: {\n                color: 'none',\n                borderColor: '#294D99',\n                borderWidth: 8,\n                shadowBlur: 20,\n                shadowColor: 'rgba(0, 0, 0, 0.25)'\n            }\n        },\n\n        backgroundStyle: {\n            color: '#E3F7FF'\n        },\n\n        itemStyle: {\n            opacity: 0.95,\n            shadowBlur: 50,\n            shadowColor: 'rgba(0, 0, 0, 0.4)'\n        },\n\n        label: {\n            show: true,\n            color: '#294D99',\n            insideColor: '#fff',\n            fontSize: 50,\n            fontWeight: 'bold',\n\n            align: 'center',\n            baseline: 'middle',\n            position: 'inside'\n        },\n\n        emphasis: {\n            itemStyle: {\n                opacity: 0.8\n            }\n        }\n    }\n});\n","var echarts = require('echarts/lib/echarts');\n\nrequire('./liquidFillSeries');\nrequire('./liquidFillView');\n\n\necharts.registerVisual(\n    echarts.util.curry(\n        require('echarts/lib/visual/dataColor'), 'liquidFill'\n    )\n);\n","var echarts = require('echarts/lib/echarts');\nvar numberUtil = echarts.number;\nvar symbolUtil = require('echarts/lib/util/symbol');\nvar parsePercent = numberUtil.parsePercent;\n\nvar LiquidLayout = require('./liquidFillLayout');\n\nfunction getShallow(model, path) {\n    return model && model.getShallow(path);\n}\n\necharts.extendChartView({\n\n    type: 'liquidFill',\n\n    render: function (seriesModel, ecModel, api) {\n        var group = this.group;\n        group.removeAll();\n\n        var data = seriesModel.getData();\n\n        var itemModel = data.getItemModel(0);\n\n        var center = itemModel.get('center');\n        var radius = itemModel.get('radius');\n\n        var width = api.getWidth();\n        var height = api.getHeight();\n        var size = Math.min(width, height);\n        // itemStyle\n        var outlineDistance = 0;\n        var outlineBorderWidth = 0;\n        var showOutline = seriesModel.get('outline.show');\n\n        if (showOutline) {\n            outlineDistance = seriesModel.get('outline.borderDistance');\n            outlineBorderWidth = parsePercent(\n                seriesModel.get('outline.itemStyle.borderWidth'), size\n            );\n        }\n\n        var cx = parsePercent(center[0], width);\n        var cy = parsePercent(center[1], height);\n\n        var outterRadius;\n        var innerRadius;\n        var paddingRadius;\n\n        var isFillContainer = false;\n\n        var symbol = seriesModel.get('shape');\n        if (symbol === 'container') {\n            // a shape that fully fills the container\n            isFillContainer = true;\n\n            outterRadius = [\n                width / 2,\n                height / 2\n            ];\n            innerRadius = [\n                outterRadius[0] - outlineBorderWidth / 2,\n                outterRadius[1] - outlineBorderWidth / 2\n            ];\n            paddingRadius = [\n                parsePercent(outlineDistance, width),\n                parsePercent(outlineDistance, height)\n            ];\n\n            radius = [\n                Math.max(innerRadius[0] - paddingRadius[0], 0),\n                Math.max(innerRadius[1] - paddingRadius[1], 0)\n            ];\n        }\n        else {\n            outterRadius = parsePercent(radius, size) / 2;\n            innerRadius = outterRadius - outlineBorderWidth / 2;\n            paddingRadius = parsePercent(outlineDistance, size);\n\n            radius = Math.max(innerRadius - paddingRadius, 0);\n        }\n\n        if (showOutline) {\n            var outline = getOutline();\n            outline.style.lineWidth = outlineBorderWidth;\n            group.add(getOutline());\n        }\n\n        var left = isFillContainer ? 0 : cx - radius;\n        var top = isFillContainer ? 0 : cy - radius;\n\n        var wavePath = null;\n\n        group.add(getBackground());\n\n        // each data item for a wave\n        var oldData = this._data;\n        var waves = [];\n        data.diff(oldData)\n            .add(function (idx) {\n                var wave = getWave(idx, false);\n\n                var waterLevel = wave.shape.waterLevel;\n                wave.shape.waterLevel = isFillContainer ? height / 2 : radius;\n                echarts.graphic.initProps(wave, {\n                    shape: {\n                        waterLevel: waterLevel\n                    }\n                }, seriesModel);\n\n                wave.z2 = 2;\n                setWaveAnimation(idx, wave, null);\n\n                group.add(wave);\n                data.setItemGraphicEl(idx, wave);\n                waves.push(wave);\n            })\n            .update(function (newIdx, oldIdx) {\n                var waveElement = oldData.getItemGraphicEl(oldIdx);\n\n                // new wave is used to calculate position, but not added\n                var newWave = getWave(newIdx, false, waveElement);\n\n                // changes with animation\n                var shape = {};\n                var shapeAttrs = ['amplitude', 'cx', 'cy', 'phase', 'radius', 'radiusY', 'waterLevel', 'waveLength'];\n                for (var i = 0; i < shapeAttrs.length; ++i) {\n                    var attr = shapeAttrs[i];\n                    if (newWave.shape.hasOwnProperty(attr)) {\n                        shape[attr] = newWave.shape[attr];\n                    }\n                }\n\n                var style = {};\n                var styleAttrs = ['fill', 'opacity', 'shadowBlur', 'shadowColor'];\n                for (var i = 0; i < styleAttrs.length; ++i) {\n                    var attr = styleAttrs[i];\n                    if (newWave.style.hasOwnProperty(attr)) {\n                        style[attr] = newWave.style[attr];\n                    }\n                }\n\n                if (isFillContainer) {\n                    shape.radiusY = height / 2;\n                }\n\n                // changes with animation\n                echarts.graphic.updateProps(waveElement, {\n                    shape: shape\n                }, seriesModel);\n\n                waveElement.useStyle(style);\n\n                // instant changes\n                waveElement.position = newWave.position;\n                waveElement.setClipPath(newWave.clipPath);\n                waveElement.shape.inverse = newWave.inverse;\n\n                setWaveAnimation(newIdx, waveElement, waveElement);\n                group.add(waveElement);\n                data.setItemGraphicEl(newIdx, waveElement);\n                waves.push(waveElement);\n            })\n            .remove(function (idx) {\n                var wave = oldData.getItemGraphicEl(idx);\n                group.remove(wave);\n            })\n            .execute();\n\n        if (itemModel.get('label.show')) {\n            group.add(getText(waves));\n        }\n\n        this._data = data;\n\n        /**\n         * Get path for outline, background and clipping\n         *\n         * @param {number} r outter radius of shape\n         * @param {boolean|undefined} isForClipping if the shape is used\n         *                                          for clipping\n         */\n        function getPath(r, isForClipping) {\n            if (symbol) {\n                // customed symbol path\n                if (symbol.indexOf('path://') === 0) {\n                    var path = echarts.graphic.makePath(symbol.slice(7), {});\n                    var bouding = path.getBoundingRect();\n                    var w = bouding.width;\n                    var h = bouding.height;\n                    if (w > h) {\n                        h = r * 2 / w * h;\n                        w = r * 2;\n                    }\n                    else {\n                        w = r * 2 / h * w;\n                        h = r * 2;\n                    }\n\n                    var left = isForClipping ? 0 : cx - w / 2;\n                    var top = isForClipping ? 0 : cy - h / 2;\n                    path = echarts.graphic.makePath(\n                        symbol.slice(7),\n                        {},\n                        new echarts.graphic.BoundingRect(left, top, w, h)\n                    );\n                    if (isForClipping) {\n                        path.position = [-w / 2, -h / 2];\n                    }\n                    return path;\n                }\n                else if (isFillContainer) {\n                    // fully fill the container\n                    var x = isForClipping ? -r[0] : cx - r[0];\n                    var y = isForClipping ? -r[1] : cy - r[1];\n                    return symbolUtil.createSymbol(\n                        'rect', x, y, r[0] * 2, r[1] * 2\n                    );\n                }\n                else {\n                    var x = isForClipping ? -r : cx - r;\n                    var y = isForClipping ? -r : cy - r;\n                    if (symbol === 'pin') {\n                        y += r;\n                    }\n                    else if (symbol === 'arrow') {\n                        y -= r;\n                    }\n                    return symbolUtil.createSymbol(symbol, x, y, r * 2, r * 2);\n                }\n            }\n\n            return new echarts.graphic.Circle({\n                shape: {\n                    cx: isForClipping ? 0 : cx,\n                    cy: isForClipping ? 0 : cy,\n                    r: r\n                }\n            });\n        }\n        /**\n         * Create outline\n         */\n        function getOutline() {\n            var outlinePath = getPath(outterRadius);\n            outlinePath.style.fill = null;\n\n            outlinePath.setStyle(seriesModel.getModel('outline.itemStyle')\n                .getItemStyle());\n\n            return outlinePath;\n        }\n\n        /**\n         * Create background\n         */\n        function getBackground() {\n            // Seperate stroke and fill, so we can use stroke to cover the alias of clipping.\n            var strokePath = getPath(radius);\n            strokePath.setStyle(seriesModel.getModel('backgroundStyle')\n                .getItemStyle());\n            strokePath.style.fill = null;\n\n            // Stroke is front of wave\n            strokePath.z2 = 5;\n\n            var fillPath = getPath(radius);\n            fillPath.setStyle(seriesModel.getModel('backgroundStyle')\n                .getItemStyle());\n            fillPath.style.stroke = null;\n\n            var group = new echarts.graphic.Group();\n            group.add(strokePath);\n            group.add(fillPath);\n\n            return group;\n        }\n\n        /**\n         * wave shape\n         */\n        function getWave(idx, isInverse, oldWave) {\n            var radiusX = isFillContainer ? radius[0] : radius;\n            var radiusY = isFillContainer ? height / 2 : radius;\n\n            var itemModel = data.getItemModel(idx);\n            var itemStyleModel = itemModel.getModel('itemStyle');\n            var phase = itemModel.get('phase');\n            var amplitude = parsePercent(itemModel.get('amplitude'),\n                radiusY * 2);\n            var waveLength = parsePercent(itemModel.get('waveLength'),\n                radiusX * 2);\n\n            var value = data.get('value', idx);\n            var waterLevel = radiusY - value * radiusY * 2;\n            phase = oldWave ? oldWave.shape.phase\n                : (phase === 'auto' ? idx * Math.PI / 4 : phase);\n            var normalStyle = itemStyleModel.getItemStyle();\n            if (!normalStyle.fill) {\n                var seriesColor = seriesModel.get('color');\n                var id = idx % seriesColor.length;\n                normalStyle.fill = seriesColor[id];\n            }\n\n            var x = radiusX * 2;\n            var wave = new LiquidLayout({\n                shape: {\n                    waveLength: waveLength,\n                    radius: radiusX,\n                    radiusY: radiusY,\n                    cx: x,\n                    cy: 0,\n                    waterLevel: waterLevel,\n                    amplitude: amplitude,\n                    phase: phase,\n                    inverse: isInverse\n                },\n                style: normalStyle,\n                position: [cx, cy]\n            });\n            wave.shape._waterLevel = waterLevel;\n\n            var hoverStyle = itemModel.getModel('emphasis.itemStyle')\n                .getItemStyle();\n            hoverStyle.lineWidth = 0;\n            echarts.graphic.setHoverStyle(wave, hoverStyle);\n\n            // clip out the part outside the circle\n            var clip = getPath(radius, true);\n            // set fill for clipPath, otherwise it will not trigger hover event\n            clip.setStyle({\n                fill: 'white'\n            });\n            wave.setClipPath(clip);\n\n            return wave;\n        }\n\n        function setWaveAnimation(idx, wave, oldWave) {\n            var itemModel = data.getItemModel(idx);\n\n            var maxSpeed = itemModel.get('period');\n            var direction = itemModel.get('direction');\n\n            var value = data.get('value', idx);\n\n            var phase = itemModel.get('phase');\n            phase = oldWave ? oldWave.shape.phase\n                : (phase === 'auto' ? idx * Math.PI / 4 : phase);\n\n            var defaultSpeed = function (maxSpeed) {\n                var cnt = data.count();\n                return cnt === 0 ? maxSpeed : maxSpeed *\n                    (0.2 + (cnt - idx) / cnt * 0.8);\n            };\n            var speed = 0;\n            if (maxSpeed === 'auto') {\n                speed = defaultSpeed(5000);\n            }\n            else {\n                speed = typeof maxSpeed === 'function'\n                    ? maxSpeed(value, idx) : maxSpeed;\n            }\n\n            // phase for moving left/right\n            var phaseOffset = 0;\n            if (direction === 'right' || direction == null) {\n                phaseOffset = Math.PI;\n            }\n            else if (direction === 'left') {\n                phaseOffset = -Math.PI;\n            }\n            else if (direction === 'none') {\n                phaseOffset = 0;\n            }\n            else {\n                console.error('Illegal direction value for liquid fill.');\n            }\n\n            // wave animation of moving left/right\n            if (direction !== 'none' && itemModel.get('waveAnimation')) {\n                wave\n                    .animate('shape', true)\n                    .when(0, {\n                        phase: phase\n                    })\n                    .when(speed / 2, {\n                        phase: phaseOffset + phase\n                    })\n                    .when(speed, {\n                        phase: phaseOffset * 2 + phase\n                    })\n                    .during(function () {\n                        if (wavePath) {\n                            wavePath.dirty(true);\n                        }\n                    })\n                    .start();\n            }\n        }\n\n        /**\n         * text on wave\n         */\n        function getText(waves) {\n            var labelModel = itemModel.getModel('label');\n\n            function formatLabel() {\n                var formatted = seriesModel.getFormattedLabel(0, 'normal');\n                var defaultVal = (data.get('value', 0) * 100);\n                var defaultLabel = data.getName(0) || seriesModel.name;\n                if (!isNaN(defaultVal)) {\n                    defaultLabel = defaultVal.toFixed(0) + '%';\n                }\n                return formatted == null ? defaultLabel : formatted;\n            }\n\n            var textOption = {\n                z2: 10,\n                shape: {\n                    x: left,\n                    y: top,\n                    width: (isFillContainer ? radius[0] : radius) * 2,\n                    height: (isFillContainer ? radius[1] : radius) * 2\n                },\n                style: {\n                    fill: 'transparent',\n                    text: formatLabel(),\n                    textAlign: labelModel.get('align'),\n                    textVerticalAlign: labelModel.get('baseline')\n                },\n                silent: true\n            };\n\n            var outsideTextRect = new echarts.graphic.Rect(textOption);\n            var color = labelModel.get('color');\n            echarts.graphic.setText(outsideTextRect.style, labelModel, color);\n\n            var insideTextRect = new echarts.graphic.Rect(textOption);\n            var insColor = labelModel.get('insideColor');\n            echarts.graphic.setText(insideTextRect.style, labelModel, insColor);\n            insideTextRect.style.textFill = insColor;\n\n            var group = new echarts.graphic.Group();\n            group.add(outsideTextRect);\n            group.add(insideTextRect);\n\n            // clip out waves for insideText\n            var boundingCircle = getPath(radius, true);\n\n            wavePath = new echarts.graphic.CompoundPath({\n                shape: {\n                    paths: waves\n                },\n                position: [cx, cy]\n            });\n\n            wavePath.setClipPath(boundingCircle);\n            insideTextRect.setClipPath(wavePath);\n\n            return group;\n        }\n    },\n\n    dispose: function () {\n        // dispose nothing here\n    }\n});\n","var echarts = require('echarts/lib/echarts');\n\nmodule.exports = echarts.graphic.extendShape({\n    type: 'ec-liquid-fill',\n\n    shape: {\n        waveLength: 0,\n        radius: 0,\n        radiusY: 0,\n        cx: 0,\n        cy: 0,\n        waterLevel: 0,\n        amplitude: 0,\n        phase: 0,\n        inverse: false\n    },\n\n    buildPath: function (ctx, shape) {\n        if (shape.radiusY == null) {\n            shape.radiusY = shape.radius;\n        }\n\n        /**\n         * We define a sine wave having 4 waves, and make sure at least 8 curves\n         * is drawn. Otherwise, it may cause blank area for some waves when\n         * wave length is large enough.\n         */\n        var curves = Math.max(\n            Math.ceil(2 * shape.radius / shape.waveLength * 4) * 2,\n            8\n        );\n\n        // map phase to [-Math.PI * 2, 0]\n        while (shape.phase < -Math.PI * 2) {\n            shape.phase += Math.PI * 2;\n        }\n        while (shape.phase > 0) {\n            shape.phase -= Math.PI * 2;\n        }\n        var phase = shape.phase / Math.PI / 2 * shape.waveLength;\n\n        var left = shape.cx - shape.radius + phase - shape.radius * 2;\n\n        /**\n         * top-left corner as start point\n         *\n         * draws this point\n         *  |\n         * \\|/\n         *  ~~~~~~~~\n         *  |      |\n         *  +------+\n         */\n        ctx.moveTo(left, shape.waterLevel);\n\n        /**\n         * top wave\n         *\n         * ~~~~~~~~ <- draws this sine wave\n         * |      |\n         * +------+\n         */\n        var waveRight = 0;\n        for (var c = 0; c < curves; ++c) {\n            var stage = c % 4;\n            var pos = getWaterPositions(c * shape.waveLength / 4, stage,\n                shape.waveLength, shape.amplitude);\n            ctx.bezierCurveTo(pos[0][0] + left, -pos[0][1] + shape.waterLevel,\n                pos[1][0] + left, -pos[1][1] + shape.waterLevel,\n                pos[2][0] + left, -pos[2][1] + shape.waterLevel);\n\n            if (c === curves - 1) {\n                waveRight = pos[2][0];\n            }\n        }\n\n        if (shape.inverse) {\n            /**\n             * top-right corner\n             *                  2. draws this line\n             *                          |\n             *                       +------+\n             * 3. draws this line -> |      | <- 1. draws this line\n             *                       ~~~~~~~~\n             */\n            ctx.lineTo(waveRight + left, shape.cy - shape.radiusY);\n            ctx.lineTo(left, shape.cy - shape.radiusY);\n            ctx.lineTo(left, shape.waterLevel);\n        }\n        else {\n            /**\n             * top-right corner\n             *\n             *                       ~~~~~~~~\n             * 3. draws this line -> |      | <- 1. draws this line\n             *                       +------+\n             *                          ^\n             *                          |\n             *                  2. draws this line\n             */\n            ctx.lineTo(waveRight + left, shape.cy + shape.radiusY);\n            ctx.lineTo(left, shape.cy + shape.radiusY);\n            ctx.lineTo(left, shape.waterLevel);\n        }\n\n        ctx.closePath();\n    }\n});\n\n\n\n/**\n * Using Bezier curves to fit sine wave.\n * There is 4 control points for each curve of wave,\n * which is at 1/4 wave length of the sine wave.\n *\n * The control points for a wave from (a) to (d) are a-b-c-d:\n *          c *----* d\n *     b *\n *       |\n * ... a * ..................\n *\n * whose positions are a: (0, 0), b: (0.5, 0.5), c: (1, 1), d: (PI / 2, 1)\n *\n * @param {number} x          x position of the left-most point (a)\n * @param {number} stage      0-3, stating which part of the wave it is\n * @param {number} waveLength wave length of the sine wave\n * @param {number} amplitude  wave amplitude\n */\nfunction getWaterPositions(x, stage, waveLength, amplitude) {\n    if (stage === 0) {\n        return [\n            [x + 1 / 2 * waveLength / Math.PI / 2, amplitude / 2],\n            [x + 1 / 2 * waveLength / Math.PI,     amplitude],\n            [x + waveLength / 4,                   amplitude]\n        ];\n    }\n    else if (stage === 1) {\n        return [\n            [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 2),\n            amplitude],\n            [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 1),\n            amplitude / 2],\n            [x + waveLength / 4,                   0]\n        ]\n    }\n    else if (stage === 2) {\n        return [\n            [x + 1 / 2 * waveLength / Math.PI / 2, -amplitude / 2],\n            [x + 1 / 2 * waveLength / Math.PI,     -amplitude],\n            [x + waveLength / 4,                   -amplitude]\n        ]\n    }\n    else {\n        return [\n            [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 2),\n            -amplitude],\n            [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 1),\n            -amplitude / 2],\n            [x + waveLength / 4,                   0]\n        ]\n    }\n}\n","module.exports = require('./src/liquidFill');\n"],"sourceRoot":""}